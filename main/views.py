import random
from django.shortcuts import render
from django.views.generic import ListView, DetailView, TemplateView, CreateView
from django.views.generic.edit import FormView,UpdateView
from django.urls import reverse

# Apps Imports
from .models import mquiz
from .forms import StartQuizForm, CreateQuizForm

# Create your views here.

class HomeView(TemplateView):
    template_name = 'base.html'


class StartView(FormView):
    form_class = StartQuizForm
    template_name = 'main/start_quiz_t.html'

    def get_success_url(self):
        session = self.request.session
        p_key = {'pk': session['q_ids_list'][session['curr_q_index']]}
        print('Start primary Key =', p_key['pk'])
        return reverse('main:show_quiz', kwargs=p_key)

    def form_valid(self, form):
        array_size = form.cleaned_data['how_many_questions']
        max_range = mquiz.objects.count()
        session = self.request.session
        qno_set = set()
        while True:
            q_id = random.randrange(1, max_range + 1)
            if q_id not in qno_set: qno_set.add(q_id)
            if len(qno_set) == int(array_size):
                break
        session['q_ids_list'] = list(qno_set)
        print(session['q_ids_list'])
        session['curr_q_index'] = 0

        return super().form_valid(form)


class QuizView(DetailView):
    # Name of the model to be used by the generic ListView
    model = mquiz
    # Specify your own template name/location
    template_name = "main/quiz_view_t.html"
    # your own name for the list as a template variable
    context_object_name = 'question'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        print([(key, "=", val) for key, val in context.items()])
        session = self.request.session
        # locate the current question position in the session variable
        curr_q_index = session['q_ids_list'].index(int(context['question'].pk))
        print('Current Q index', curr_q_index)
        # Change the index position to the current question
        session['curr_q_index'] = curr_q_index
        # Decide the prev and next question pks for the next and prev buttons
        if session['curr_q_index'] == 0:
            prevpk = session['q_ids_list'][len(session['q_ids_list']) - 1]
            nextpk = session['q_ids_list'][session['curr_q_index'] + 1]
        elif session['curr_q_index'] == len(session['q_ids_list']) - 1:
            prevpk = session['q_ids_list'][session['curr_q_index'] - 1]
            nextpk = session['q_ids_list'][0]
        else:
            prevpk = session['q_ids_list'][session['curr_q_index'] - 1]
            nextpk = session['q_ids_list'][session['curr_q_index'] + 1]

        # Set the context variables for the prev and next buttons.
        context['question'].prevq = prevpk
        context['question'].nextq = nextpk

        return context


class QCreateView(CreateView):
    # For a create View we specify a model. A form with all the fields
    # will be automatically generated by the Class based View functionality
    model = mquiz

    # If we need we can specify the list of fields. He we don't because we are
    # using a separate form class for this.
    # fields = ('qdesc','qop1','qop2','qop3','qop4','qop5',
    #          'qans','qhint','qsol','qimg')

    # We can specify a form_class if we are creating our on form based on the
    # model. Here we are using the form created by Django CBV
    form_class = CreateQuizForm

    # The form thus generated will have to be displayed within a html template
    # We need a html file for that in out templates folder. The name of the
    # html form will depened on the suffic we specify below.
    # In this case the the name of the template file should be
    # mquiz_create_form.html, where mquiz=Modelname
    template_name_suffix = '_create_form'


class QDetailView(DetailView):
    template_name_suffix = '_detail_view'
    context_object_name = 'q'
    model = mquiz


class QListView(ListView):
    # Name of the model to be used by the generic ListView
    model = mquiz
    # your own name for the list as a template variable
    context_object_name = 'q_list'
    # What objects to list
    queryset = mquiz.objects.all()
    # Finally template name
    template_name = 'main/quiz_list_view_t.html'


class QUpdateView(UpdateView):
    # Name of the model to be used by the generic UpdateView
    model = mquiz
    # We may need the form class
    form_class = CreateQuizForm
    # Finally template name
    template_name_suffix = '_create_form'
    # Note that the update view generic class would get the pk value
    # from the urls.py